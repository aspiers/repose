<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- product name is likely to change; parameterize full name, abbreviated name, expanded name -->
        <!ENTITY PRODNAME "Repose">
        <!ENTITY PRODABBREV "Repose">
        <!ENTITY PRODEXPAND "REstful PrOxy Service Engine">
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Check_mark_23x20_02.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>

        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Arrow_east.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>
        ]>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook"
         version="5.0"
         xmlns="http://docbook.org/ns/docbook"

         xml:id="Repose-Ratelimiting-Chapter">
    <?rax pdf.url="../../repose-versioning-deploy.pdf"?>

    <title>Rate Limiting Filter</title>
    <section xml:id="Rate-Limiting-Introduction">
        <title>Introduction</title>
        <para>Rate limiting is the process of controlling the amount
            of HTTP requests that are allowed to hit your service per
            a configurable time period. You can use Repose's rate
            limiting filter to manage the flow of traffic into your
            service so that it does not exceed the service's actual
            capacity. In addition to allowing you to manage legitimate
            workloads, this allows you to prevent overload due to
            abuse of your system.
        </para>


        <section xml:id="Rate-Limiting-What-It-Does">
            <title>What Can Repose Rate Limiting Do?</title>
            <para>To understand how Repose handles rate limiting, you must
                understand the relationship between Repose and an origin
                service. An origin service is the service for which Repose
                is performing a function. For example, if Repose is used
                to provide rate limiting to a load-balancing service, then
                the load-balancing service is Repose's origin service.
                Requests are sent to Repose as the proxy for the origin
                service, not to the server where the origin service lives.
                Repose functions as a reverse proxy, in that it acts on
                behalf of the origin service rather than on behalf of the
                client. Repose passes client requests to the origin
                service only after those requests have been examined and
                processed by the Repose filters configured for that origin
                service.
            </para>
            <para>Repose's rate limiting filter protects the origin
                service from being bombarded by client requests. It
                accomplishes this by specifying limits for the number of
                times a client may request a given resource. When a client
                has exceeded the number of requests permitted during the
                current time period, no further requests from that client
                are delivered to the origin service until a new time
                period begins. This provides essential protection to any
                public-facing API.
            </para>
            <para>A client's current limits may include the client's
                absolute limits. Absolute limits are specific to a
                service domain and are therefore only provided by the
                origin service. However, Repose will integrate
                absolute and current limits as they apply to a client.
                Repose does not enforce absolute limits, but it does
                inform the origin service of those limits.
            </para>
            <para>The Repose Rate Limiting filter performs two categories
                of behavior:
                <itemizedlist>
                    <listitem>
                        <para>
                            <link linkend="querying_limits-d1e439"
                                    >Querying for Limits
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="tracking_limits-d1e440"
                                    >Tracking Limits
                            </link>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
    <section xml:id="Rate-Limiting-Use-Cases" security="writeronly">
        <title>Rate Limiting Use Cases</title>
        <para></para>
    </section>

    <section xml:id="Rate-limiting-request-prerequisites">
        <title>Rate Limiting Request Prerequisites</title>
        <para>You must use one of the Identity filters in front of the
            Rate limiting filters in order to set the required
            X-PP-User header. In addition, if you support
            percent-encoded or URL encoded entities, you must use the
            URI Normalization filter in front of the Identity filter.
        </para>
        <section xml:id="Identity-filter">
            <title>Identity Filter to Set X-PP-User</title>
            <para>To correctly rate limit a requested resource, the rate
                limiting component uses one required HTTP header
                precondition and one optional HTTP header precondition.
            </para>
            <table rules="all" frame="box" border="1">
                <?dbfo keep-together="always"?>
                <caption>HTTP Request Headers</caption>
                <thead>
                    <tr>
                        <td>Header</td>
                        <td>Purpose</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <para>
                                <code>X-PP-User</code>
                            </para>
                            <para>
                                <emphasis>Required</emphasis>
                            </para>
                        </td>
                        <td>
                            <para>
                                <code>X-PP-User</code>
                                is a single-value
                                header. This header is used to describe
                                the unique name of the client making the
                                request. This name is used in part to
                                cache and store request hits.
                            </para>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <para>
                                <code>X-PP-Groups</code>
                            </para>
                            <para>
                                <emphasis>Optional</emphasis>
                            </para>
                        </td>
                        <td>
                            <para>
                                <code>X-PP-Groups</code>
                                is a list of
                                string values. This header is used to
                                describe all of the limit groups the
                                client belongs to. A client may belong to
                                multiple limit groups or to none.
                            </para>
                        </td>
                    </tr>
                </tbody>
            </table>
            <para>These headers are used by the Rate Limiting filter but
                are populated by other Repose components such as the
                Authentication filter.
            </para>
            <para>Repose filters may add values to HTTP message headers to
                communicate a set of options to downstream filters. To aid
                downstream filters in selecting the most qualified value
                from a given set, the values themselves may be annotated
                with a quality factor parameter. This allows downstream
                filters to make a decision based on the available options
                rather then on which filter overwrote the header last.
            </para>
        </section>
        <section xml:id="URL-Normalization-Filter">
            <title>URL Normalization Filter for Percent-encoded
                URLs
            </title>
            <para>If you support URI encoded entities such as the
                following paths:
            </para>
            <itemizedlist>
                <listitem>
                    <para>/servers/abc/instances/123</para>
                </listitem>
                <listitem>
                    <para>/servers/abc/instances/%31%32%33</para>

                </listitem>
            </itemizedlist>
            <para>you need to use the URI Normalization filter
                in front of the Rate Limiting filter. Percent
                encoded URLs will fail to be properly rate
                limited unless normalized by the URI
                Normalization filter.
            </para>
        </section>
    </section>

    <section xml:id="Rate-Limiting-Configuration-Options">
        <title>Configuration Options</title>

        <para>Configure the Rate Limiting filter by editing the rate-limiting.cfg.xml file
            and specifying the headers to be normalized. Add the filter to the Repose
            deployment through the System Model Configuration by editing the following
            elements and attributes:
        </para>

        <para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold"
                            >&lt;rate-limiting&gt;</emphasis>: uses
                        the accompanying sub-elements and attributes
                        to define your rate limiting
                        configuration.
                    </para>

                    <para>
                        <itemizedlist>
                            <listitem>
                                <para><emphasis role="bold"
                                        >datastore</emphasis> <guilabel>(optional)</guilabel>: stores
                                    rate limiting information. If not
                                    specified, rate limiting will use
                                    the first distributed datastore
                                    available. If no distributed
                                    datastores are available, it will
                                    revert to using a local datastore.
                                    Valid values are local/default,
                                    distributed/hash-ring (requires
                                    dist-datastore service), and
                                    distributed/replicated (requires
                                    replicated-datastore
                                    filter).
                                </para>
                                <note>
                                    <para>If the rate limiting filter
                                        is configured to use the
                                        distributed datastore, and the
                                        distributed datastore service is
                                        unable to communicate with other
                                        nodes (e.g., during a rolling
                                        upgrade to Repose) , the
                                        distributed datastore service will
                                        fall back on the local datastore.
                                        As a result, rate limits may not be
                                        tracked correctly (limits cannot be
                                        retrieved from damaged nodes, and
                                        are created fresh on the local
                                        datastore).
                                    </para>

                                </note>
                            </listitem>
                        </itemizedlist>
                    </para>

                    <para>
                        <itemizedlist>
                            <listitem>
                                <para><emphasis role="bold"
                                        >datastore-warn-limit</emphasis> <guilabel>(optional)</guilabel>: defines 
                                    <emphasis
                                            role="bold"
                                            >&lt;limit&gt;</emphasis> in order
                                    to log a warning on size when an
                                    object is stored in the database
                                    over this limit. When the limit is
                                    met, Repose will issue a warning
                                    message in the logs. The limit
                                    default is 1000 cache keys per
                                    user.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >overLimit-429-responseCode</emphasis> <guilabel>(optional)</guilabel>: when
                                    set to true, will send a 429
                                    response code instead of the
                                    default 413 response code. The 429
                                    response code in conjunction with
                                    the Response Messaging Service
                                    Configuration will provide a custom
                                    over-limit message. 
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis role="bold"
                                            >use-capture-groups
                                    </emphasis>
                                     <guilabel>(optional)</guilabel>:
                                    when  is set to false, it will
                                    count all the requests with the
                                    &lt;uri-regex&gt; that have the
                                    capture group towards the limit
                                    count specified. By default, this
                                    attribute is set to true. If it is
                                    set to false, the first rate limit
                                    with a uri-regex that matches the
                                    request URI will be used to apply
                                    the rate limit. 
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold"
                                >&lt;request-endpoint&gt; 
                        </emphasis>
                        <guilabel>(recommended)</guilabel>
                        : This
                        element sets the endpoint and format with
                        which the user can query limits. It must
                        specify a regular expression that identifies
                        client requests for the client's current
                        limits. This element is highly recommended,
                        but it is not required. If the
                        request-endpoint element is not in the
                        configuration, the user cannot query limits.
                    </para>

                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis role="bold"
                                            >uri-regex: 
                                    </emphasis>
                                    the regular
                                    expression (regex) used to match a
                                    passing request to the current
                                    limit group. Within the regex, each
                                    capture group is allowed the number
                                    of requests specified in the value
                                    attribute of the limit element. 
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >uri: </emphasis>defines a
                                    human-readable URI describing the
                                    endpoint for a given configured
                                    limit.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >include-absolute-limits: </emphasis>enables
                                    or disables integration with
                                    absolute limits. 
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold"
                                >&lt;limit-group&gt;</emphasis>
                        : defines
                        a list of rate limits to be applied to a user,
                        based on the user's membership in a group.
                    </para>

                    <para>
                        <itemizedlist>
                            <listitem>
                                <para><emphasis role="bold"
                                        >id</emphasis>: defines the unique
                                    identifier for a given limit
                                    group.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >groups</emphasis>: defines a
                                    space-delimited list of the groups
                                    to which this limit group will
                                    apply.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >default</emphasis>: identifies the
                                    limit group that will be applied if
                                    a user is passed if either no group
                                    is specified or no group in the
                                    rate limiting configuration matches
                                    the group or groups
                                    specified.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">&lt;limit&gt;</emphasis>
                        : describes limits configured for a given
                        endpoint.
                    </para>

                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis role="bold"
                                            >id
                                    </emphasis>
                                    <guilabel>(required)</guilabel>: defines
                                    the unique identifier for a given
                                    limit. Each
                                    <guilabel>&lt;limit></guilabel>
                                    element must have an id attribute
                                    that is unique within the each
                                    <guilabel>&lt;limit-group></guilabel>.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >http-methods: </emphasis>lists the
                                    HTTP methods associated with this
                                    limit. Valid values include: GET,
                                    DELETE, POST, PUT, HEAD, OPTIONS,
                                    CONNECT, TRACE, ALL.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >unit</emphasis>: defines the unit
                                    of time associated with this limit.
                                    Valid values include: SECOND,
                                    MINUTE, HOUR, DAY.
                                </para>
                            </listitem>
                            <listitem>
                                <para><emphasis role="bold"
                                        >value</emphasis>: defines the
                                    number of requests allowed within
                                    the configured unit of time.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            <guilabel>Your rate limiting configuration in
                rate-limiting.cfg.xml will resemble
                the following example:
            </guilabel>
        </para>
        <example>
            <title>Rate Limiting Configuration: XML</title>
            <programlistingco>
                <areaspec>
                    <area xml:id="cfg.xml.request-endpoint" units="linecolumn" coords="5 22"/>
                    <area xml:id="cfg.xml.uri-regex" units="linecolumn" coords="5 32"/>
                    <area xml:id="cfg.xml.include-absolute-limits" units="linecolumn" coords="6 32"/>
                    <area xml:id="cfg.xml.limit-group" units="linecolumn" coords="8 17"/>
                    <area xml:id="cfg.xml.id" units="linecolumn" coords="8 21"/>
                    <area xml:id="cfg.xml.groups" units="linecolumn" coords="9 15"/>
                    <area xml:id="cfg.xml.default" units="linecolumn" coords="9 35"/>
                    <area xml:id="cfg.xml.limit" units="linecolumn" coords="10 15"/>
                </areaspec>
                <programlisting language="xml">
                    &lt;?xml version="1.0" encoding="UTF-8"?&gt;

                    &lt;rate-limiting xmlns="http://docs.rackspacecloud.com/repose/rate-limiting/v1.0"&gt;
                    &lt;request-endpoint uri-regex="/service/limits/"
                    include-absolute-limits="true"/&gt;

                    &lt;limit-group id="customer-limits "
                    groups="customer" default="true"&gt;
                    &lt;limit uri="/service/*" uri-regex="/service/([\d^/]*)/.*"
                    http-methods="GET" unit="SECOND" value="1"/&gt;
                    &lt;limit uri="/service/*" uri-regex="/service/([\d^/]*)/.*"
                    http-methods="DELETE" unit="MINUTE" value="5"/&gt;
                    &lt;limit uri="/service/*" uri-regex="/service/([\d^/]*)/.*"
                    http-methods="PUT" unit="HOUR" value="15"/&gt;
                    &lt;limit uri="/service/*" uri-regex="/service/([\d^/]*)/.*"
                    http-methods="POST" unit="DAY" value="2"/&gt;
                    &lt;/limit-group&gt;

                    &lt;limit-group id="admin-limits"
                    groups="admin"&gt;
                    &lt;limit uri="/service/admin/*" uri-regex="/service/admin/(.*)"
                    http-methods="GET POST PUT DELETE" unit="SECOND" value="1"/&gt;
                    &lt;/limit-group&gt;
                    &lt;/rate-limiting&gt;

                </programlisting>
            </programlistingco>
        </example>
        <para>Key elements of the preceding example are labeled with
            callouts and explained below:
        </para>
        <calloutlist>
            <callout arearefs="cfg.xml.request-endpoint">
                <para>The
                    <code>request-endpoint</code>
                    configuration
                    element must specify a regular expression that
                    identifies client requests for the client's
                    current limits.
                </para>
                <para>This element is highly
                    <emphasis>recommended</emphasis>, but it is
                    not required. If the
                    <code>request-endpoint</code>
                    element is not in the configuration, the user
                    cannot query limits.
                </para>
                <para></para>
            </callout>
            <callout arearefs="cfg.xml.uri-regex">
                <para>The
                    <code>uri-regex</code>
                    attribute of the
                    <code>request-endpoint</code>
                    configuration
                    element must be a regular expression. It should
                    match all representations of the request resource
                    that the rate limiting component should answer.
                </para>
                <para>This attribute is
                    <emphasis>required</emphasis>.
                </para>
                <para></para>
            </callout>
            <callout arearefs="cfg.xml.include-absolute-limits">
                <para>The
                    <code>include-absolute-limits</code>
                    attribute of the
                    <code>request-endpoint</code>
                    configuration element is a Boolean attribute that
                    can be used to switch on or off integration with
                    the origin service's absolute limits.
                </para>
                <para>This attribute is
                    <emphasis>optional</emphasis>.
                </para>
                <para>Acceptable values are<code>TRUE</code>,
                    <code>FALSE</code>.
                </para>
                <para></para>
            </callout>
            <callout arearefs="cfg.xml.limit-group">
                <para>One or more specifications of
                    <code>limit-group</code>
                    may be associated
                    with a single specification of
                    <code>request-endpoint</code>.
                </para>
                <para>Limit groups identify a group of related rate
                    limits and bind them to a series of names. The
                    names can be used to limit incoming requests using
                    the
                    <code>X-PP-Groups</code>
                    header.
                </para>
                <para></para>
            </callout>
            <callout arearefs="cfg.xml.id">
                <para>An
                    <code>id</code>
                    uniquely identifies each
                    <code>limit-group</code>.
                </para>
                <para></para>
            </callout>
            <callout arearefs="cfg.xml.groups">
                <para>Specifying
                    <code>groups</code>
                    for a
                    <code>limit-group</code>
                    associates it with
                    recognizable workloads. In this example, one
                    <code>limit-group</code>
                    relates to customers
                    and another relates to administrators.
                </para>
                <para></para>
            </callout>
            <callout arearefs="cfg.xml.default">
                <para>A single
                    <code>limit-group</code>
                    may be
                    identified as the
                    <code>default</code>
                    group. The
                    <code>default</code>
                    group will handle any
                    requests that cannot be matched on the basis of a
                    group name to any of the groups identified in the
                    <code>X-PP-Groups</code>
                    header. In this
                    example, the limits defined for
                    <code>groups="customer"</code>
                    will be applied
                    to requests that cannot be explicitly matched to a
                    group.
                </para>
                <para></para>
            </callout>


            <callout arearefs="cfg.xml.limit">
                <para>The uri attribute defines a human-readable
                    descriptive name for this limit.
                </para>

            </callout>
        </calloutlist>
        <section xml:id="multiple-rate-limits">
            <title>Multiple Rate Limits</title>
            <para>
                <guilabel>Limit Order</guilabel>
            </para>
            <para>By editing your rate-limiting.cfg.xml file, you can configure multiple rate limits.</para>
            <para>Within each 
                <emphasis role="bold"
                        >&lt;limit-group&gt;</emphasis>
                , you can define
                one or more rate limits by using a regular expression
                to match against request URIs, the maximum number of
                requests allowed by the limit, and the unit of time
                before the count applied to the limit is reset. To
                further restrict the requests a limit applies to, you
                can also define HTTP methods, but these are not
                required. Each 
                <emphasis role="bold"
                        >&lt;limit&gt;</emphasis>
                 element has a "bucket"
                with an allowance described above. For each request,
                all applicable limits add a hit into their respective
                buckets. Multiple rate limits that match the same
                request, such as POST on * and POST on /servers, will
                all apply. 
            </para>
            <para>When the number of hits in a bucket exceeds the value of the corresponding limit,
                future requests are rate-limited and will not be forwarded to the origin service.
                After the configured unit of time for a limit has passed from the time of the first
                request the limit was applied to, the bucket will be emptied and the process will restart.
                When the allowance for one limit is reached, subsequent limits within the same limit
                group will never be applied. In other words, the most restrictive limit will prevent
                updates to subsequent limits. If a request does not cause a bucket to go over limit,
                the request passes.
            </para>


            <para>
                <guilabel>Group Limit Order</guilabel>
            </para>
            <para>Rate Limits are only applied to the first matching 
                <emphasis role="bold"
                        >&lt;limit-group&gt;</emphasis>
                . For example,
                some user “test” is in both the “admin” and “observer”
                groups. If the “admin” limit-group is defined in the
                configuration above the  “observer” limit-group,
                the “admin” limit-group will apply its limits while
                the "observer" limit-group will not.
            </para>


            <para>
                <guilabel>Methods</guilabel>
            </para>
            <para>Limits with multiple methods in the http-methods attribute or with the http-method
                of ALL will match against the listed methods, and matching requests will fall in the
                same bucket rather than in separate buckets for each method. For example, if a limit
                has http-methods="GET POST" and value="3", then three GET or POST requests will be passed,
                but a fourth, GET or POST request will be rejected because it exceeds the limit of 3.
                The following example shows how this would work.
            </para>


            <para>
                <guilabel>Time-block Approach</guilabel>
            </para>
            <para>With the time block approach, each time-block or unit is independent of other units.
                On average, the configured rate limit of X will be enforced. During a rare spike, up to
                2X-1 requests can pass through in less than one unit of time.
            </para>
            <para>In the following example, five requests are allowed per minute for each time-block,
                but the one-minute window that lands in between the two units has seven requests.
                You may see over-limits during particular windows; however, across multiple units of time,
                the allowed requests average less than or equal to five requests per minute.
            </para>


            <figure
                    xml:id="time-block-figure">
                <title>Time-block Figure</title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                                fileref="../figures/repose-time-block.png"
                                format="PNG" align="center"/>
                    </imageobject>
                </mediaobject>
            </figure>


            <note>
                <para>The difference stems from the way time is
                    perceived by the Rate Limiting filter; the filter
                    views time as discrete units rather than a
                    continuous stream.
                </para>
            </note>


            <para>
                <guilabel>Example of Multiple Rate
                    Limiting
                </guilabel>
            </para>

            <para>
                <emphasis role="italic">The following example shows
                    a sample request, a configuration for multiple
                    rate limiting, and a table showing how the
                    requests are updated.
                </emphasis>
            </para>
            <para>This is a valid request that could pass
                through the Rate Limiting filter multiple times
                depending on the rate limit intervals that are set
                in the rate-limiting.cfg.xml
                file.
            </para>

            <!-- REQUEST HERE  -->
            <informaltable frame="void">
                <col width="100%"/>
                <thead>
                    <tr>
                        <th>Request</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <para>GET /test/one HTTP/1.1</para>
                            <para>Host: api.example.com</para>
                            <para>X-PP-User: person-1</para>
                            <para>X-PP-Groups: user</para>
                        </td>
                    </tr>
                </tbody>
            </informaltable>

            <para>This section of the rate-limiting configuration
                shows only one<guilabel>&lt;limit
                    group&gt;</guilabel>. Your configuration may have
                numerous
                <guilabel>&lt;limit groups&gt;</guilabel>
                listed. Within each
                <guilabel>&lt;limit-group&gt;</guilabel>, you may
                have numerous<guilabel>&lt;limits&gt;</guilabel>.
            </para>

            <!-- CONFIG HERE -->
            <example>
                <title>Sample Multiple Rate Limit</title>
                <programlisting language="xml">
                    <xi:include href="../samples/repose-multiple-rate-limit.xml" parse="text"/>
                </programlisting>
            </example>


            <para>This table details a one-second scenario
                of the preceding request and rate limiting
                configuration.
            </para>

            <!--  LIST DESCRIPTION AND TABLE HERE  -->


            <orderedlist>
                <listitem>
                    <para>The first request passes all three
                        limits because the methods match and the limit
                        values have not been exceeded.
                    </para>

                    <db:para>
                        <note>
                            <para>Only the first matching
                                <guilabel>&lt;limit
                                    group&gt;</guilabel>
                                is applied to a
                                request.
                            </para>
                        </note>
                    </db:para>
                </listitem>
                <listitem>
                    <para>The second request passes all three limits
                        like the first. Limit "two" has been reached. 
                    </para>
                </listitem>
                <listitem>
                    <para>The third request passes the first limit
                        and is then rejected because the allowance has
                        already been fulfilled for the second limit
                        until the next 24-hour period.
                    </para>

                </listitem>
            </orderedlist>
            <informaltable frame="void">
                <col width="14%"/>
                <col width="14%"/>
                <col width="14%"/>
                <col width="14%"/>
                <col width="14%"/>
                <col width="14%"/>
                <col width="14%"/>
                <thead>
                    <tr>
                        <th>&lt;limit> id</th>
                        <th>Limit value</th>
                        <th>Bucket Allowance After 1st Request</th>
                        <th>Bucket Allowance After 2nd Request</th>
                        <th>Bucket Allowance After 3rd Request</th>
                        <th>Bucket Allowance After 4th Request</th>
                        <th>Bucket Allowance After 5th Request</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>one</td>
                        <td>5</td>
                        <td>4</td>
                        <td>3</td>
                        <td>2</td>
                        <td>1</td>
                        <td>0 (limit hit)</td>
                    </tr>
                    <tr>
                        <td>two</td>
                        <td>2</td>
                        <td>1</td>
                        <td>0 (limit hit)</td>
                        <td>0 (request rejected)</td>
                        <td>0 (request rejected)</td>
                        <td>0 (request rejected)</td>
                    </tr>
                    <tr>
                        <td>three</td>
                        <td>4</td>
                        <td>3</td>
                        <td>2</td>
                        <td>2</td>
                        <td>2</td>
                        <td>2</td>
                    </tr>
                </tbody>
            </informaltable>


        </section>
    </section>

    <section xml:id="Tracking_Requests-d1e431">
        <title>Rate Limiting Behavior</title>
        <para>There are two general categories of behavior performed
            by the Repose rate limiting component:
            <itemizedlist>
                <listitem xml:id="querying">
                    <para>Querying for Limits</para>
                </listitem>
                <listitem xml:id="tracking">
                    <para>Tracking Limits</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="querying_limits-d1e439">
            <title>Querying Limits</title>
            <para>This feature allows the client to view how
                many requests a user has already sent and how
                the Rate Limiting filter behaves.
            </para>
            <para>The Rate Limiting Filter caches rate limits by user.
                Consequently, to query limits, a user must be passed
                into the rate limiting component. The rate limiting
                component uses the
                <code>X-PP-User</code>
                header to
                identify the user whose limits will be queried. Without a
                value in this header, the rate limiting component will
                send back a "401 Unauthorized".
            </para>
            <para>The rate limiting component uses the
                <code>X-PP-Groups</code>
                header to determine which
                rate limits to apply to the user. Without this header
                present, the rate limiting component will assign
                limits from a default group specified in the
                <code>rate-limiting.cfg.xml</code>
                configuration
                file.
            </para>
            <para>It is possible to query a user's rate limits before
                the user's limits are placed in the cache. This is the
                case when querying limits before the user has ever
                been rate limited. In this case, there are two
                possible results based on the contents of the
                <code>X-PP-Groups</code>
                header:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>If the X-PP-Groups header containing
                            specification of a group is passed in,
                            then the rate limits configured for the
                            specified group in rate-limiting.cfg.xml
                            are returned.
                        </para>
                    </listitem>
                    <listitem>
                        <para>If the X-PP-Groups header is not passed
                            in, then the rate limits configured for
                            the default limit group in
                            rate-limiting.cfg.xml are returned.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>

            <para>As shown below, a request in which the user is
                identified via
                <code>X-PP-User</code>
                and the user's group
                is identified via
                <code>X-PP-Groups</code>
                generates a
                response showing all the limits applicable to that user in
                that group:
            </para>
            <table rules="all">

                <caption>Sample Request/Response Conversation: Request
                    Limits for User
                </caption>
                <col width="30%"/>
                <col width="70%"/>
                <thead>
                    <tr>
                        <th>Request</th>
                        <th>Response</th>
                    </tr>

                </thead>
                <tbody>
                    <tr>
                        <td>
                            <literallayout class="monospaced">
                                GET /service/limits HTTP/1.1
                                Accept: application/vnd.rackspace-v1.0+xml
                                X-PP-User: demo-username
                                X-PP-Groups: demo-customer
                            </literallayout>
                        </td>
                        <td>

                            <literallayout class="monospaced">
                                HTTP/1.1 200 OK
                                Content-Length: 538
                            </literallayout>


                            <programlisting language="xml">
                                &lt;?xml version="1.0" encoding="UTF-8"?&gt;

                                &lt;limits xmlns="http://docs.openstack.org/common/api/v1.0"&gt;
                                &lt;rates&gt;
                                &lt;rate uri="/service*" regex="/service/([\d^/]*)/.*"&gt;
                                &lt;limit value="5" verb="DELETE" unit="MINUTE"
                                <guilabel>remaining="1"</guilabel>
                                next-available="2010-12-15T22:42:12Z" /&gt;
                                &lt;limit value="15" verb="PUT" unit="HOUR"
                                remaining="4" next-available="2010-12-15T22:42:12Z" /&gt;
                                &lt;
                                <guilabel>limit value="2"</guilabel>
                                verb="POST" unit="DAY"
                                remaining="1" next-available="2010-12-15T22:42:12Z" /&gt;
                                &lt;/rate&gt;
                                &lt;/rates&gt;
                                &lt;/limits&gt;

                            </programlisting>

                        </td>
                    </tr>
                </tbody>

            </table>
            <note>
                <para>The rate limiting component understands quality
                    factors for the
                    <code>X-PP-User</code>
                    and
                    <code>X-PP-Groups</code>
                    headers. This is useful
                    when a service implementer wishes to employ multiple
                    authentication/identity mechanisms. You can learn more
                    about how Repose handles authentication and
                    identity in the Repose Authentication and
                    Authorization Components Deployment Handbook.
                </para>
                <para>If multiple user or group values are present in the
                    <code>X-PP-User</code>
                    or
                    <code>X-PP-Groups</code>
                    headers with the same quality, then the first value is
                    used. If the user or group does not have an explicit
                    quality, Repose assumes the quality for that item
                    is 1.
                </para>
            </note>
            <para>In the rate limiting configuration shown below,
                <code>rate-limiting.cfg.xml</code>
                defines limits to
                be applied to two groups,
                <code>BETA_Group</code>
                and
                <code>IP_Standard</code>, and separately defines
                limits to be applied to default group named
                <code>My_Group</code>. The limits defined for
                <code>My_Group</code>
                apply when no other group is
                specified. In the
                <code>request-endpoint</code>
                element,
                which applies to all groups, the 
                <code>uri-regex</code>
                attribute is set to<code>/limits</code>.  This is the URI
                at which the user should query for rate limits.
            </para>
            <example>
                <title>Rate Limiting Configuration with Default
                    Group
                </title>
                <programlisting language="xml">
                    &lt;rate-limiting xmlns="http://docs.rackspacecloud.com/repose/rate-limiting/v1.0"&gt;
                    &lt;request-endpoint uri-regex="/limits" include-absolute-limits="false" /&gt;

                    &lt;limit-group id="limited" groups="BETA_Group IP_Standard" default="false"&gt;
                    &lt;limit uri="*" uri-regex="/something/(.*)" http-methods="PUT" unit="MINUTE" value="10" /&gt;
                    &lt;limit uri="*" uri-regex="/something/(.*)" http-methods="GET" unit="MINUTE" value="10" /&gt;
                    &lt;/limit-group&gt;

                    &lt;limit-group id="limited-all" groups="My_Group" default="true"&gt;
                    &lt;limit uri="*" uri-regex="/something/(.*)" http-methods="ALL" unit="HOUR" value="10" /&gt;
                    &lt;/limit-group&gt;
                    &lt;/rate-limiting&gt;

                </programlisting>
            </example>
            <para>Under this rate limiting configuration, a request in
                which the user is not yet in the cache generates a
                response showing the limits applicable to that user on the
                basis of the default group:
            </para>
            <table rules="all">

                <caption>Sample Request/Response Conversation: Request
                    Limits for User Not in Cache
                </caption>
                <col width="30%"/>
                <col width="70%"/>
                <thead>
                    <tr>
                        <th>Request</th>
                        <th>Response</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <programlisting>
                                curl http://localhost:8020/limits -H "x-pp-user:
                                123456" -H "accept: application/xml"
                            </programlisting>
                        </td>

                        <td>
                            <informalexample>
                                <programlisting language="xml">
                                    &lt;limits xmlns="http://docs.openstack.org/common/api/v1.0"&gt;
                                    &lt;rates&gt;
                                    &lt;rate regex="/something/(.*)" uri="*"&gt;
                                    &lt;limit next-available="2012-06-22T14:39:33.832Z" unit="HOUR" remaining="10"
                                    value="10" verb="ALL"/&gt;
                                    &lt;/rate&gt;
                                    &lt;/rates&gt;
                                    &lt;/limits&gt;

                                </programlisting>
                            </informalexample>
                        </td>
                    </tr>
                </tbody>


            </table>
            <para>Under the same rate limiting configuration, a request
                associating a user with a group generates a response
                showing the limits applicable to that user on the basis of
                membership in the
                <code>IP_Standard</code>
                group:
            </para>
            <table rules="all">

                <caption>Sample Request/Response Conversation: Request
                    Limits for User in Group
                </caption>
                <col width="30%"/>
                <col width="70%"/>
                <thead>
                    <tr>
                        <th>Request</th>
                        <th>Response</th>
                    </tr>
                </thead>

                <tr>
                    <td>
                        <programlisting>
                            curl http://localhost:8020/limits -H "x-pp-user:
                            123456" -H "x-pp-groups: IP_Standard" -H "accept:
                            application/xml"
                        </programlisting>
                    </td>
                    <td>
                        <informalexample>
                            <programlisting language="xml">
                                &lt;limits xmlns="http://docs.openstack.org/common/api/v1.0"&gt;
                                &lt;rates&gt;
                                &lt;rate regex="/something/(.*)" uri="*"&gt;
                                &lt;limit next-available="2012-06-22T15:38:17.956Z" unit="MINUTE" remaining="10"
                                value="10" verb="PUT"/&gt;
                                &lt;limit next-available="2012-06-22T15:38:17.956Z" unit="MINUTE" remaining="10"
                                value="10" verb="GET"/&gt;
                                &lt;/rate&gt;
                                &lt;/rates&gt;
                                &lt;/limits&gt;

                            </programlisting>
                        </informalexample>
                    </td>
                </tr>
            </table>

        </section>
        <section xml:id="tracking_limits-d1e440">
            <title>Tracking Limits</title>
            <para>This feature tracks the number of requests a
                user has within a timetable defined by the rate
                limiting configuration. The Rate Limiting filter tracks limits by decrementing all rate-limits which
                match the request URI and the verb as shown in the
                example below. To track limits, specify a POST to<emphasis role="italic"
                        >/servers</emphasis>.
            </para>


            <table rules="all">

                <caption>Tracking Limits Example:</caption>
                <thead>
                    <tr>
                        <th>Verb</th>
                        <th>URI</th>
                        <th>Limit</th>
                        <th>Remaining</th>
                    </tr>
                </thead>
                <tr>
                    <td>POST</td>
                    <td>.*</td>
                    <td>10/min</td>
                    <td>10/min</td>
                </tr>
                <tr>
                    <td>POST</td>
                    <td>servers</td>
                    <td>50/day</td>
                    <td>50/day</td>
                </tr>

            </table>


            <table rules="all">
                <caption></caption>

                <thead>
                    <tr>
                        <th>Verb</th>
                        <th>URI</th>
                        <th>Limit</th>
                        <th>Remaining</th>
                    </tr>
                </thead>
                <tr>
                    <td>POST</td>
                    <td>.*</td>
                    <td>10/min</td>
                    <td>9/min</td>
                </tr>
                <tr>
                    <td>POST</td>
                    <td>servers</td>
                    <td>50/day</td>
                    <td>49/day</td>
                </tr>

            </table>

            <table rules="all">
                <caption></caption>

                <thead>
                    <tr>
                        <th>Verb</th>
                        <th>URI</th>
                        <th>Limit</th>
                        <th>Remaining</th>
                    </tr>
                </thead>
                <tr>
                    <td>POST</td>
                    <td>.*</td>
                    <td>10/min</td>
                    <td>8/min</td>
                </tr>
                <tr>
                    <td>POST</td>
                    <td>servers</td>
                    <td>50/day</td>
                    <td>48/day</td>
                </tr>

            </table>


            <para>Repose shares limits across nodes using the
                Distributed Datastore service. Look here for more
                information about setting up the Distributed Datastore
                service for use with the Rate Limiting filter.
            </para>
            <para/>

            <!--<link
                    linkend="distributed_datastore_NEED ID">Distributed
                    Datastore</link> -->


        </section>
        <section xml:id="Distributed-Rate-Limiting">
            <title>Set Up Distributed Rate Limiting</title>
            <para>
                Repose shares limits across nodes using the Distributed Datastore Service.
                You can implement distributed rate limiting with Repose by adding the
                Distributed Datastore service with the Rate Limiting filter.
            </para>
            <procedure>
                <title>To set up distributed rate limiting:</title>
                <step>
                    <para>Configure Repose using a cluster configuration (multiple servers). Note that all servers must
                        use the same system model.
                    </para>
                </step>
                <step>
                    <para>Add the Rate Limiting filter to your system model configuration.</para>
                </step>
                <step>
                    <para>Add the Distributed Datastore service to your system model configuration.</para>
                </step>
                <step>
                    <para>Configure the Distributed Datastore service to listen on a port as shown in the following
                        example.
                    </para>
                </step>
            </procedure>

        </section>
    </section>
    <section xml:id="Limited-d1e731">
        <title>Handling Limited Client Requests</title>
        <para>When a client makes a request that exceeds the client's
            specified rate limit, the rate limiting component will
            return the HTTP response code
            <errorcode>413</errorcode>
            (Request Entity Too Large).
        </para>
        <para>When this occurs, the response's
            <code>Retry-After</code>
            HTTP header contains
            HTTP-encoded data that the client can use to plan a retry.
        </para>


        <table rules="all">

            <caption>Sample Request/Response Conversation: Rate
                Exceeded
            </caption>
            <thead>
                <tr>
                    <td>Request</td>
                    <td>Response</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <programlisting>
                            GET /service/my/resource HTTP/1.1
                            Accept: application/vnd.rackspace-v1.0+xml
                            X-PP-User: username
                            X-PP-Groups: customer
                        </programlisting>
                    </td>


                    <td>
                        <programlisting>
                            HTTP/1.1 413 Request Entity Too Large
                            Retry-After: Thu, 30 Jun 2011 20:24:39 GMT
                        </programlisting>
                    </td>
                </tr>
            </tbody>
        </table>
    </section>

    <section xml:id="Rate-Limiting-Filter-Order">
        <title>Rate Limiting Filter Order</title>
        <para>In order to rate limit by certain mechanisms you need
            to configure the proper identity filter
            <emphasis role="italic">before</emphasis>
            the rate limiting
            filter in your system model. The examples below show the
            necessary order of the filters.
        </para>
        <para>
            <emphasis role="bold">Rate Limit by
                User</emphasis>:
        </para>

        <para>Client-auth filter
            <code> &lt;filter name=
                "client-auth"/&gt;</code>
        </para>
        <para>Rate Limiting filter
            <code>&lt;filter name
                ="rate-limiting/&gt; </code>
        </para>
        <para/>
        <para>
            <emphasis role="bold">Rate Limit by
                URI
            </emphasis>
        </para>

        <para>URI- identity filter
            <code>&lt;filter name=
                "uri-identity"/&gt; </code>
        </para>
        <para>Rate Limiting filter
            <code> &lt;filter name=
                "rate-limiting"/&gt;</code>
        </para>
        <para/>
        <para>
            <emphasis role="bold">Rate Limit by
                Header
            </emphasis>
        </para>
        <para>Header-Identity Filter
            <code>&lt;filter
                name="header-identity"/&gt;</code>
        </para>

        <para>Rate Limiting Filter
            <code> &lt;filter name=
                "rate-limiting"/&gt; </code>
        </para>
    </section>
</section>
